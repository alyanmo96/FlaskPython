# three ex


# the weather ex.... insert location or the date&location for a specific

import argparse
import re
import requests
import json

parser=argparse.ArgumentParser()
parser.add_argument('xDate')
args=parser.parse_args()

#api_key = "ca906cb4997343508e7165953202010"
url="http://api.weatherapi.com/v1/current.json?key=ca906cb4997343508e7165953202010"
regex = re.compile('[/.:]')
if(regex.search(args.xDate) == None):
        print("location you insert: ",args.xDate)
        url+="&q="
        url+=args.xDate
else:
    print("date you insert: ",args.xDate)
    user_location=input("you also have to insert a location: ")
    url+="&dt="
    url+=args.xDate
    url+="&q="
    url+=user_location


response = requests.get(url)
data = json.loads(response.text)
print("current temp: ",data['current']['temp_c'])




#---------------------------------------------------- PYgame algorithm

"""
i tried to download the pygame, but it failed each time i try
"""
"""
import algorithms
import time
import os
import sys
import pygame
import random



class Algorithm:
    def __init__(self, name):
        self.array = random.sample(range(512), 512) # Random array of size 512
        self.name = name # Get name of the variable

    def update_display(self, swap1=None, swap2=None):
        import visualizer
        visualizer.update(self, swap1, swap2) # pass the indexes to be swapped into the visualizer

    def run(self): # Start the timer and run the algorithm
        self.start_time = time.time()
        self.algorithm()
        time_elapsed = time.time() - self.start_time
        return self.array, time_elapsed


# merge sort
class MergeSort(Algorithm):
    def __init__(self):
        super().__init__("MergeSort")

    def algorithm(self, array=[]):
        if array == []:
            array = self.array
        if len(array) < 2:
            return array
        mid = len(array) // 2
        left = self.algorithm(array[:mid])
        right = self.algorithm(array[mid:])
        return self.merge(left, right)

    def merge(self, left, right):
        result = []
        i, j = 0, 0
        while i < len(left) and j < len(right):
            if left[i] < right[j]:
                result.append(left[i])
                i += 1
            else:
                result.append(right[j])
                j += 1
            self.update_display()
        result += left[i:]
        result += right[j:]
        self.array = result
        self.update_display()
        return result


class BubbleSort(Algorithm):
    def __init__(self):
        super().__init__("BubbleSort")

    def algorithm(self):
        for i in range(len(self.array)):
            for j in range(len(self.array)-1-i):
                if self.array[j] > self.array[j+1]:
                    self.array[j], self.array[j+1] = self.array[j+1], self.array[j]
            self.update_display(self.array[j], self.array[j+1])

"""


########################################################      The Labyrinth
x_1=[['#' '#' '#' '#' '#' '#' '#' '#' '#' '#' '#'],
 ['#' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '#'],
 ['#' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '#'],
 ['#' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '#'],
 ['#' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '#'],
 ['#' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '#'],
 ['#' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '#'],
 ['#' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '#'],
 ['#' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '#'],
 ['#' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '#'],
 ['#' '#' '#' '#' '#' '#' '#' '#' '#' '#' '#']]

print("display the wall: ")
for value in x_1:
    print(value)
print("---------------------------------------------------------------------------------------------")
x_2=[['#' '#' '#' '#' '#' '#' '#' '#' '#' '#' '#'],
 ['#' 'S' '#'F' ' ' ' ' ' ' ' ' ' ' ' ' ' '#'],
 ['#' ' ' '#' '#' '#' '#' '#' '#' '#' ' ' '#'],
 ['#' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '#' ' ' '#'],
 ['#' '#' '#' ' ' '#' '#' '#' ' ' '#' ' ' '#'],
 ['#' ' ' '#' ' ' '#' ' ' '#' ' ' '#' ' ' '#'],
 ['#' ' ' '#' ' ' '#' ' ' '#' ' ' '#' ' ' '#'],
 ['#' ' ' '#' ' ' ' ' ' ' '#' ' ' ' ' ' ' '#'],
 ['#' ' ' '#' '#' '#' '#' '#' '#' '#' ' ' '#'],
 ['#' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '#'],
 ['#' '#' '#' '#' '#' '#' '#' '#' '#' '#' '#']]

print("display the ground: ")
for value in x_2:
    print(value)
print("---------------------------------------------------------------------------------------------")

from enum import Enum
#Use Enum to store the wall, the ground, the start and finish.
class C(Enum):
    wall=[[1,2],
              [2,2],[2,3],[2,4],[2,5],[2,6],[2,7],[2,8],
              [3,8],
              [4,1],[4,2],[4,4],[4,5],[4,6],[4,8],
              [5,2],[5,4],[5,6],[5,8],
              [6,2],[6,4],[6,6],[6,8],
              [7,2],[7,5],
              [8,2],[8,3],[8,4],[8,5],[8,6],[8,7],[8,8]
              ]
    ground=[[1,1],[1,4],[1,3],[1,5],[1,6],[1,7],[1,8],[1,9],
                [2,1],[2,9],
                [3,1],[3,2],[3,3],[3,4],[3,5],[3,6],[3,7],[3,9],
                [4,3],[4,7],[4,9],
                [5,1],[5,3],[5,5],[5,7],[5,9],
                [6,1],[6,3],[6,5],[6,7],[6,9],
                [7,1],[7,3],[7,4],[7,6],[7,7],[7,8],[7,9],
                [8,1],[8,9],
                [9,1],[9,2],[9,3],[9,4],[9,5],[9,6],[9,7],[9,8],[9,9]
        ]
    maze=[[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],
                [2,1],[2,9],[2,2],[2,3],[2,4],[2,5],[2,6],[2,7],[2,8],
                [3,1],[3,2],[3,3],[3,4],[3,5],[3,6],[3,7],[3,9],[3,8],
                [4,3],[4,7],[4,9],[4,1],[4,2],[4,4],[4,5],[4,6],[4,8],
                [5,1],[5,3],[5,5],[5,7],[5,9],[5,2],[5,4],[5,6],[5,8],
                [6,1],[6,3],[6,5],[6,7],[6,9],[6,2],[6,4],[6,6],[6,8],
                [7,1],[7,2],[7,3],[7,4],[7,5],[7,6],[7,7],[7,8],[7,9],
                [8,1],[8,2],[8,3],[8,4],[8,5],[8,6],[8,7],[8,8],[8,9],
                [9,1],[9,2],[9,3],[9,4],[9,5],[9,6],[9,7],[9,8],[9,9]
    ]
    start=[1,1]
    finish=[1,3]
    ##      ##      ##      ##      ##      ##      ##      ##      ##      ##

list_of_ground=[]
list_of_wall=[]
list_of_reject_ground=[]
maze=[]
start=[]
finish=[]
list_of_road=[]
list_of_last_element=[-1,-1,0]# help list to know any stuck element

if __name__ == "__main__":
    list_of_ground=C.ground.value
    list_of_wall=C.wall.value
    start=C.start.value
    finish=C.finish.value
    maze=C.maze.value



print("list of ground ",list_of_ground)
print("list of walls ",list_of_wall)
print("the start elements ",start)
print("the finish elements ",finish)
print("the list of elements of the right road at the start ",list_of_road)
print("")
print("                                                    start                                              ")
print("")


def check_if_can_go_from_this_index(start_the_road_search,i,j,was_on_right,was_on_left,was_on_up,was_on_down):
    if start_the_road_search==1 and len(list_of_road)<2:#no more steps and we did not reach the goal
        print("#-# no more steps and we did not reach the goal")
        return

    print("list_of_road   ",list_of_road)
    if len(list_of_road)>5:
        start_the_road_search=1
    if list_of_last_element[2]>2:
        print("stuck on special element")
        if [list_of_road[-1][0],list_of_road[-1][1]] not in list_of_reject_ground:
            list_of_reject_ground.append([list_of_road[-1][0],list_of_road[-1][1]])
        list_of_road.pop()
        list_of_last_element[2]=0
        print(list_of_road)

    if i==list_of_last_element[0] and j==list_of_last_element[1]:
        list_of_last_element[2]+=1
    list_of_last_element[0]=i
    list_of_last_element[1]=j

    if finish in list_of_road :
        print("Yes, found the indexs of road : \n" , list_of_road)
        return
    if check_if_can_go_down(i,j)==1 and was_on_up!=1:
        print("go down")
        i=list_of_road[-1][0]
        i+=1
        check_if_can_go_from_this_index(start_the_road_search,i,j,-1,-1,was_on_up,1)
        return
    if was_on_up==1:
        list_of_road.pop()

    if check_if_can_go_left(i,j)==1 and was_on_right!=1:
        print("go left")
        j=list_of_road[-1][1]
        j-=1
        check_if_can_go_from_this_index(start_the_road_search,i,j,was_on_right,was_on_left,-1,-1)
        return

    if check_if_can_go_right(i,j)==1 and was_on_left!=1:
        print("go right")
        j=list_of_road[-1][1]
        j+=1
        check_if_can_go_from_this_index(start_the_road_search,i,j,1,was_on_left,-1,-1)
        return

    if check_if_can_go_up(i,j)==1 and was_on_down!=1:
        print("go up")
        i=list_of_road[-1][0]
        i-=1
        check_if_can_go_from_this_index(start_the_road_search,i,j,-1,-1,1,-1)
        return

    if len(list_of_road)<=0:
        return
    else:

        print("!!!!!!NO way you have to return back!!!!!!!!!!")
        if [list_of_road[-1][0],list_of_road[-1][1]] not in list_of_reject_ground:
            list_of_reject_ground.append([list_of_road[-1][0],list_of_road[-1][1]])
        print("list_of_reject_ground:  ",list_of_reject_ground)
        print("list_of_road before we pop the stuck element",list_of_road)
        list_of_road.pop()
        print("list_of_road after we pop the stuck element",list_of_road)
        print((list_of_road[-1][0],list_of_road[-1][1]))

        if list_of_reject_ground[-1][0]!=list_of_road[-1][0] and list_of_reject_ground[-1][0]>list_of_road[-1][0]:#back up
            check_if_can_go_from_this_index(start_the_road_search,list_of_road[-1][0],list_of_road[-1][1],-1,-1,1,-1)

        elif list_of_reject_ground[-1][0]!=list_of_road[-1][0] and list_of_reject_ground[-1][0]<list_of_road[-1][0]:#back down
            check_if_can_go_from_this_index(start_the_road_search,list_of_road[-1][0],list_of_road[-1][1],-1,-1,-1,1)

        elif list_of_reject_ground[-1][1]!=list_of_road[-1][1] and list_of_reject_ground[-1][1]>list_of_road[-1][1]:#back left:
            check_if_can_go_from_this_index(start_the_road_search,list_of_road[-1][0],list_of_road[-1][1],1,-1,-1,-1)
        else:# back rigth
            check_if_can_go_from_this_index(start_the_road_search,list_of_road[-1][0],list_of_road[-1][1],-1,1,-1,-1)

#####################################################UP
def check_if_can_go_up(i,j):
    if  i<=1 or [i,j] in list_of_reject_ground:
        return -1
    if [i,j]not  in list_of_road and [i,j] not in list_of_wall:
        list_of_road.append([i,j])
    for index_i in list_of_wall:
        if index_i[0]==i-1 and index_i[1]==j:
            return -1
    return 1

#####################################################DOWN
def check_if_can_go_down(i,j):
    if i >= 9 or [i,j] in list_of_reject_ground:
        return -1
    for index_i in list_of_wall:
        if index_i[0]==i+1 and index_i[1]==j:
            return -1
    if [i,j] not in list_of_wall and [i,j] not in list_of_road:
        list_of_road.append([i,j])
    return 1

#####################################################LEFT
def check_if_can_go_left(i,j):
    if [i,j] in list_of_road:
        return -1
    if j > 9 or j<=1 or [i,j] in list_of_reject_ground or [i,j] in list_of_road:

        return -1
    for index_i in list_of_wall:
        if index_i[0]==i and index_i[1]==j-1:
            return -1
    if [i,j] not in list_of_wall and[i,j] not in list_of_road:
        list_of_road.append([i,j])
    return 1

#####################################################RIGHT
def check_if_can_go_right(i,j):
    if j >= 9:
        return -1
    for index_i in list_of_wall:
        if index_i[0]==i and index_i[1]==j+1:
            return -1
    if [i,j] not in list_of_road and [i,j] not in list_of_reject_ground and [i,j] not in list_of_wall:
        list_of_road.append([i,j])
    return 1



#####################################################AS MAIN AS
check_if_can_go_from_this_index(-1,1,1,-1,-1,-1,-1)
